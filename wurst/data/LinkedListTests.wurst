package LinkedListTests
import LinkedList

@Test
function testAddRemove()
	let list = new LinkedList<int>()
	assertTrue(list.size() == 0)
	
	list..add(1, 2, 3, 4)
	assertTrue(list.size() == 4)
	
	let itr = list.staticItr()
	while itr.hasNext()
		itr.next()
		itr.remove()

	assertTrue(list.size() == 0)

@Test
function testForLoop()
	let list = new LinkedList<int>()
	
	list..add(1, 2, 3, 4)
	
	list.updateAll(i -> i + 1)
	
	var result = 0
	for i in list
		result += i

	assertTrue(result == (5+4+3+2))

@Test function testBackIter()
	let list = new LinkedList<int>()
	let list2 = new LinkedList<int>()
	
	list..add(1, 2, 3, 4)
	list2..add(4, 3, 2, 1)
	
	let bi = list.backiterator()
	let i = list2.iterator()
	while bi.hasNext() and i.hasNext()
		bi.next().assertEquals(i.next())	

@Test function testAddAll()
	let list = new LinkedList<int>()
	let list2 = new LinkedList<int>()
	
	list..add(1, 2)
	list2..add(3, 4)
	list.addAll(list2)

	assertTrue(list.get(2) == 3)
	assertTrue(list.get(3) == 4)

	var result = 0
	for i in list
		result += i
	assertTrue(result == (1+2+3+4))

@Test function testAddVararg()
	let list = new LinkedList<int>()
	let list2 = new LinkedList<int>()
	
	list.add(1, 2)
	list2.add(3, 4)
	list.addAll(list2)

	assertTrue(list.get(2) == 3)
	assertTrue(list.get(3) == 4)

	var result = 0
	for i in list
		result += i
	assertTrue(result == (1+2+3+4))

@Test
function testClosures()
	let list = new LinkedList<int>()
	list..add(1, 2, 3, 4)
	
	list.updateAll(i -> i * 2)
	assertTrue(list.get(3) == 4*2)

	list.removeWhen(i -> i > 4)
	assertTrue(list.size() == 2)

	let realList = list.map<real>(i -> i * 10.)
	assertTrue(realList.get(1) == 40.)

@Test
function testGenerics()
	let list = new LinkedList<string>()
	list..add("a", "b", "c")
	assertTrue(list.get(1) == "b")

	let list2 = new LinkedList<real>()
	list2..add(1.230, 2.563, 1213143.)
	assertTrue(list2.get(0) == 1.230)
	assertTrue(list2.get(1) == 2.563)
	assertTrue(list2.get(2) == 1213143.)


@Test function testSort()
	let list = new LinkedList<int>()
	for i = 0 to 400
		list..add(GetRandomInt(-100, 100)*2 + 1)
	list.sort()
	
	let itr = list.iterator()
	int i2 = 0
	while itr.hasNext()
		i2++
		let next = itr.next()
		let lookahead = itr.lookahead()
		if lookahead != 0
			next.assertLessThanOrEqual(lookahead)
	itr.close()
	i2.assertEquals(list.size())

	let bitr = list.backiterator()
	int bi2 = 0
	while bitr.hasNext()
		bitr.next().toString()
		bi2++

	bi2.assertEquals(list.size())

@Test function testAddAt()
	let list = new LinkedList<int>()
	for i = 1 to 6
		list.add(i)
	list.addAt(7, 4)
	string elems = ""
	for elem in list
		elems += elem.toString()
	elems.assertEquals("1234756")

@Test function testRemoveWhen()
	var list = new LinkedList<int>()
	for i = 1 to 6
		list.add(i)
	list.removeWhen(i -> i < 3)
	list.size().assertEquals(4)
	list.get(2).assertEquals(5)

@Test function testFilter()
	var list = new LinkedList<int>()
	for i = 1 to 6
		list.add(i)
	list = list.filter(i -> i > 3)
	list.size().assertEquals(3)
	list.get(2).assertEquals(6)

@Test function testFoldl()
	var list = new LinkedList<int>()
	for i = 1 to 6
		list.add(i)
	let result = list.foldl<int>(0, (i, q) -> q + i)
	result.assertEquals(21)

@Test function testToString()
	var list = new LinkedList<int>()
	for i = 1 to 6
		list.add(i)
	let result = list.toString()
	result.assertEquals("[1,2,3,4,5,6]")

@Test function testSortReal()
	var list = new LinkedList<real>()
	for i = 6 downto 1
		list.add(i.toReal())
	list.sort()
	list.get(0).assertEquals(1.)
	list.get(5).assertEquals(6.)

@Test function testAsList()
	asList(1,2,3,4).foldl<int>(0, (i, q) -> q + i)
		.assertEquals(asList(4,3,2,1).foldl<int>(0, (i, q) -> q + i))
